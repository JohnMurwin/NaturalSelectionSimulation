#   Continuous Integration Pipeline
#   Uses: SonarCloud, GameCI, UnityTestRunner,
#   From: John Murwin, Mirage, SonarCloud, and Fathom7

name: CI
on:
  push:
    branches: [main, dev]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    types: [opened, synchronize, reopened, edited]
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:

  TestProject:
    name: Run Tests in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - NaturalSelectionSimulation
        testMode:
          - playmode
          - editmode

    steps:
      # First we checkout the project with LFS support (don't need fetch depth here)
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true

      # Cache library for future speed for Analysis
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-

      # Using GameCI's Unity Test Runner, Run Tests via CLI
      - name: Unity Test Runner via CLI
        uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          customParameters: -nographics -debugCodeOptimization -enableCodeCoverage -coverageResultsPath ./CodeCoverage -coverageOptions generateAdditionalMetrics
          unityVersion: 2020.3.26f1
      
      # Upload Code Coverage XML Reports to CodeCov
      - name: Upload XML report to Codecov
        uses: codecov/codecov-action@v2
        with:
          name: Unity Test Runner Results
          flags: automated
          token: ${{ secrets.CODECOV_TOKEN }}
          files: CodeCoverage/**/*.xml

      # Upload Test Results as Artifacts for each testMode matrix
      - name: Upload Results as Artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
  
  BuildProject:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.

    steps:
      # First checkout the repo with both LFS and FetchDepth 0 for full commit
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true

      # Cache project for future speed
      - name: Cache Project Library for next Build
        uses: actions/cache@v2
        with:
          path: NaturalSelectionSimulation/Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      # Read from file and assign to outputs object
      - name: Version Assignmnet
        id: versionOutput
        run: |
          read -r firstline < ".github/versionNum.txt"
          echo ::set-output name=semVer::$firstline

      # Use GameCI to build project with TargetPlatform Matrix
      - name: Build Matrix with UnityBuilder@v2  
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: NaturalSelectionSimulation
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Custom
          version: ${{ steps.versionOutput.outputs.semVer }}

      # Upload Build Artifacts *for PR's*
      - name: Upload Build Artifacts with Matrix 
        uses: actions/upload-artifact@v2
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}